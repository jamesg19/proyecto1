/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventas;

import static ConexionMySQL.Conexion.getConnection;
import static Ventas.Vender.RegistraVenta;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author james
 */
public class EntregaPedido extends javax.swing.JFrame {
    String CODIGOTIENDA,FECHA,FECHAENTREGA;
    ArrayList<String> LineaPedido = new ArrayList<>();                                                                                                      ArrayList<String> PedidoListoEntrega = new ArrayList<>(); 
    ArrayList<String> ArrayFecha = new ArrayList<>();                                                                                                       ArrayList<String> Cliente = new ArrayList<>();
    ArrayList<Integer> ArrayDias = new ArrayList<>();                             
    ArrayList<String> CODpedido = new ArrayList<>();
    ArrayList<String> producto = new ArrayList<>();                                                                                                         ArrayList<String> productoN = new ArrayList<>();
    ArrayList<Integer> cantidad = new ArrayList<>();                                                                                                        ArrayList<Integer> cantidadN = new ArrayList<>();
    ArrayList<Double> total = new ArrayList<>();                                                                                                            ArrayList<Double> totalN = new ArrayList<>();
    ArrayList<String> ArrayCLiente = new ArrayList<>();
    /**
     * Creates new form EntregaPedido
     * @param CODIGOTIENDA
     */                 
    public EntregaPedido(String CODIGOTIENDA) {
        initComponents();
        this.CODIGOTIENDA=CODIGOTIENDA;
        TiendaLabel.setText(CODIGOTIENDA);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MuestraDatos = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TiendaLabel = new javax.swing.JLabel();
        Dia = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        Mes = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        Year = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        Verificar = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        Entregar = new javax.swing.JButton();
        NIT = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(83, 142, 167));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel1.setText("Entrega de pedido");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(221, 0, 208, 55);

        MuestraDatos.setColumns(20);
        MuestraDatos.setRows(5);
        jScrollPane1.setViewportView(MuestraDatos);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(70, 130, 560, 131);

        jButton1.setText("SALIR");
        jPanel1.add(jButton1);
        jButton1.setBounds(12, 15, 99, 40);

        jLabel2.setText("Tienda:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(435, 12, 77, 35);
        jPanel1.add(TiendaLabel);
        TiendaLabel.setBounds(524, 12, 117, 35);

        Dia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", " " }));
        jPanel1.add(Dia);
        Dia.setBounds(440, 80, 70, 30);

        jLabel12.setText("D");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(420, 80, 20, 30);

        Mes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        jPanel1.add(Mes);
        Mes.setBounds(350, 80, 70, 30);

        jLabel20.setText("M");
        jPanel1.add(jLabel20);
        jLabel20.setBounds(330, 80, 20, 30);

        Year.setModel(new javax.swing.SpinnerNumberModel(2020, 2020, 2020, 1));
        jPanel1.add(Year);
        Year.setBounds(240, 80, 90, 30);

        jLabel19.setText("Y");
        jPanel1.add(jLabel19);
        jLabel19.setBounds(220, 80, 20, 30);

        Verificar.setText("Verificar");
        Verificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerificarActionPerformed(evt);
            }
        });
        jPanel1.add(Verificar);
        Verificar.setBounds(530, 80, 100, 30);

        jLabel21.setText("NIT");
        jPanel1.add(jLabel21);
        jLabel21.setBounds(350, 270, 20, 30);

        Entregar.setText("Entregar Pedido");
        Entregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntregarActionPerformed(evt);
            }
        });
        jPanel1.add(Entregar);
        Entregar.setBounds(430, 270, 206, 41);
        jPanel1.add(NIT);
        NIT.setBounds(70, 80, 124, 35);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerificarActionPerformed
        // TODO add your handling code here:
        limpiaArray();
        FECHA=(String) Year.getValue().toString()+"-"+(String) Mes.getSelectedItem()+"-"+(String) Dia.getSelectedItem();
        buscar();
        
        
    }//GEN-LAST:event_VerificarActionPerformed

    private void EntregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntregarActionPerformed
        // TODO add your handling code here:
        
        eliminaPedido();
        agregaPedidoEntregado();
        AgregaVenta();
    }//GEN-LAST:event_EntregarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Dia;
    private javax.swing.JButton Entregar;
    private javax.swing.JComboBox<String> Mes;
    private javax.swing.JTextArea MuestraDatos;
    private javax.swing.JTextField NIT;
    private javax.swing.JLabel TiendaLabel;
    private javax.swing.JButton Verificar;
    private javax.swing.JSpinner Year;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * limpia los arrayList utilizados para el proceso de informacion de 
     * la base de datos
     */
    private void limpiaArray(){
        LineaPedido.clear();
        ArrayFecha.clear();
        ArrayDias.clear();
        producto.clear();
        cantidad.clear();
        CODpedido.clear();
        total.clear();
        PedidoListoEntrega.clear();
        productoN.clear();
        cantidadN.clear();
        totalN.clear();
        ArrayCLiente.clear();
        Cliente.clear();
    }
    
    
    
    /**
     * Metodo para buscar pedidos del cliente seleccionado a la tienda actual
     */
    private void buscar() {
        String query = "SELECT distinctrow cod_cliente,tienda_origen,tienda_destino,fecha,cod_articulo,cantidad,total,dias_espera,codigo_pedido FROM pedido p INNER JOIN tiempo_entre_tiendas t ON p.tienda_destino=t.destino and p.tienda_destino= ?  AND p.cod_cliente= ? ";

        LineaPedido.clear();
        try (PreparedStatement preSt = getConnection().prepareStatement(query)) {    
            
            preSt.setString(1, CODIGOTIENDA);
            preSt.setString(2, NIT.getText());
            
            
            ResultSet result = preSt.executeQuery();
            MuestraDatos.setText("");
            MuestraDatos.append("Cliente\t Origen\t Destino\t Fecha\t Articulo \t Cantidad \t Total \t Dias Espera \n");
            while (result.next()) {
                
//                MuestraDatos.append(result.getString(1)+" \t"+result.getString(2)+"  \t"+result.getString(3)+"    \t"+
//                        result.getString(4)+"   \t"+result.getString(5)+"   \t"
//                        +result.getInt(6)+"   \t"+result.getDouble(7)+"   \t"+result.getInt(8)+"\n");
//            
                LineaPedido.add(result.getString(1)+"\t "+result.getString(2)+"\t "+result.getString(3)+"\t   "+result.getString(4)+"\t    "+result.getString(5) 
                            +"\t   "+result.getInt(6)+"\t   "+result.getDouble(7)+"\t   "+result.getInt(8)+"\t"); 
                ArrayFecha.add(result.getString(4));
                ArrayDias.add(result.getInt(8));
                Cliente.add(result.getString(1));
                CODpedido.add(result.getString(9));
                producto.add(result.getString(5));
                cantidad.add(result.getInt(6));
                total.add(result.getDouble(7));
                
//                MuestraDatos.append(result.getString(4)+result.getInt(8)+"\n");
                
            }
            result.close();
            preSt.close();
            

        } catch (SQLException e) {
            System.out.println("Error:" + e.getMessage());
        }
        
    
        buscar2();
//        verificaFecha();
    }
        private void buscar2() {
        String query = "SELECT distinctrow cod_cliente,tienda_origen,tienda_destino,fecha,cod_articulo,cantidad,total,dias_espera,codigo_pedido FROM pedido p INNER JOIN tiempo_entre_tiendas t ON p.tienda_destino=t.origen and p.tienda_destino= ?  AND p.cod_cliente= ? ";

        LineaPedido.clear();
        try (PreparedStatement preSt = getConnection().prepareStatement(query)) {    
            
            preSt.setString(1, CODIGOTIENDA);
            preSt.setString(2, NIT.getText());
            
            
            ResultSet result = preSt.executeQuery();
//            MuestraDatos.setText("");
//            MuestraDatos.append("Cliente\t Origen\t Destino\t Fecha\t Articulo \t Cantidad \t Total \t Dias Espera \n");
//            
            while (result.next()) {
                
//                MuestraDatos.append(result.getString(1)+" \t"+result.getString(2)+"  \t"+result.getString(3)+"    \t"+
//                        result.getString(4)+"   \t"+result.getString(5)+"   \t"
//                        +result.getInt(6)+"   \t"+result.getDouble(7)+"   \t"+result.getInt(8)+"\n");
//            
                LineaPedido.add(result.getString(1)+"\t "+result.getString(2)+"\t "+result.getString(3)+"\t   "+result.getString(4)+"\t    "+result.getString(5) 
                            +"\t   "+result.getInt(6)+"\t   "+result.getDouble(7)+"\t   "+result.getInt(8)+"\t"); 
                ArrayFecha.add(result.getString(4));
                ArrayDias.add(result.getInt(8));
                Cliente.add(result.getString(1));
                CODpedido.add(result.getString(9));
                producto.add(result.getString(5));
                cantidad.add(result.getInt(6));
                total.add(result.getDouble(7));
                
//                MuestraDatos.append(result.getString(4)+result.getInt(8)+"\n");
                
            }
            result.close();
            preSt.close();
            

        } catch (SQLException e) {
            System.out.println("Error:" + e.getMessage());
        }
        
    
        
        verificaFecha();
    }

    public void verificaFecha() {
        
        
    
            
    for(int i=0;i<LineaPedido.size();i++){
        sumarDiasAFecha(ArrayFecha.get(i),ArrayDias.get(i),i);
    }

        
        
        
    }
    
    
     /**
     * OBTENER FECHA DE ENTREGA
     * suma los dias que tarda un producto en ser entregado a la tienda
     * 
     * @param fecha
     * @param dias
     * @param pos
     * @return 
     */
     public  String sumarDiasAFecha(String fecha, int dias,int pos) {

        if(dias == 0){
            return fecha;
        }

        String[] f = fecha.split("-");
        Calendar calendar = Calendar.getInstance();
        //calendar.setTime(new Date(Integer.parseInt(f[0]), Integer.parseInt(f[1]), Integer.parseInt(f[2])));
        calendar.set(Integer.parseInt(f[0]), Integer.parseInt(f[1])-1, Integer.parseInt(f[2]));
        calendar.add(Calendar.DAY_OF_MONTH, dias);
        SimpleDateFormat fe = new SimpleDateFormat("YYYY-MM-dd");
        
        if((calendar.getTime().getMonth()+1)<10&&(calendar.getTime().getDate())<10){
          FECHAENTREGA="2020-"+"0"+(calendar.getTime().getMonth()+1)+"-0"+(calendar.getTime().getDate());
            
                if(FECHAENTREGA.contains(FECHA.trim())){
                        MuestraDatos.append(LineaPedido.get(pos)+"\n");
                        PedidoListoEntrega.add(CODpedido.get(pos));
                                
                        productoN.add(producto.get(pos));
                        cantidadN.add(cantidad.get(pos));  
                        totalN.add(total.get(pos));
                        ArrayCLiente.add(Cliente.get(pos));
                 }
        }
        if((calendar.getTime().getMonth()+1)<10&&(calendar.getTime().getDate())>=10){
          FECHAENTREGA="2020-"+"0"+(calendar.getTime().getMonth()+1)+"-"+(calendar.getTime().getDate());
            
                if(FECHAENTREGA.contains(FECHA.trim())){
                        MuestraDatos.append(LineaPedido.get(pos)+"\n");
                        PedidoListoEntrega.add(CODpedido.get(pos));
                        productoN.add(producto.get(pos));
                        cantidadN.add(cantidad.get(pos));  
                        totalN.add(total.get(pos));
                        ArrayCLiente.add(Cliente.get(pos));
                 }
          
        }
        if((calendar.getTime().getMonth()+1)>10&&(calendar.getTime().getDate())<=10){
          FECHAENTREGA="2020-"+(calendar.getTime().getMonth()+1)+"-0"+(calendar.getTime().getDate());
            
                if(FECHAENTREGA.contains(FECHA.trim())){
                        MuestraDatos.append(LineaPedido.get(pos)+"\n");
                        PedidoListoEntrega.add(CODpedido.get(pos));
                        productoN.add(producto.get(pos));
                        cantidadN.add(cantidad.get(pos));  
                        totalN.add(total.get(pos));
                        ArrayCLiente.add(Cliente.get(pos));
                 }
          
          
        }
        if((calendar.getTime().getMonth()+1)>=10&&(calendar.getTime().getDate())>=10){
          FECHAENTREGA="2020-"+(calendar.getTime().getMonth()+1)+"-"+(calendar.getTime().getDate());
            
                if(FECHAENTREGA.contains(FECHA.trim())){
                        MuestraDatos.append(LineaPedido.get(pos)+"\n");
                        PedidoListoEntrega.add(CODpedido.get(pos));
                        productoN.add(producto.get(pos));
                        cantidadN.add(cantidad.get(pos));  
                        totalN.add(total.get(pos));
                        ArrayCLiente.add(Cliente.get(pos));
                 }
          
          
        }
        

       
                    
        return fe.format(calendar.getTime());
    }

    private void eliminaPedido() {
        
     for(int m=0;m<PedidoListoEntrega.size();m++){
         
          String query = "DELETE FROM pedido WHERE codigo_pedido= ?";
        
            try (PreparedStatement preSt = getConnection().prepareStatement(query)) {

                preSt.setString(1, PedidoListoEntrega.get(m));

                preSt.executeUpdate();

                preSt.close();
            } catch (SQLException e) {
                System.out.println("ERROR AL ELIMINAR PEDIDO" + e.getMessage());
            } 
     }
  
    }

    private void agregaPedidoEntregado() {
      
        JOptionPane.showMessageDialog(null, "Se ha entregado el pedido al cliente");
        for(int j=0;j<productoN.size();j++){

   
        String query = "INSERT INTO pedido_entregado  VALUES (?, ?, ?, ?, ?, ?, ?);";

        try (PreparedStatement preSt = getConnection().prepareStatement(query)) {

            preSt.setInt(1, 0);
            preSt.setString(2, productoN.get(j));
            preSt.setString(3, CODIGOTIENDA);
            preSt.setString(4, NIT.getText());
            preSt.setInt(5, cantidadN.get(j));
            preSt.setDouble(6, totalN.get(j));
            preSt.setString(7, FECHA);
            
            preSt.executeUpdate();
            
            preSt.close();
        } catch (SQLException e) {
            System.out.println("Error: pedido entregado " + e.getMessage());
        }
    
        }        
          
    }

    private void AgregaVenta() {
        JOptionPane.showMessageDialog(null, "Se ha agregado la venta");
      
        for(int j=0;j<productoN.size();j++){

   
        String query = "INSERT INTO ventas VALUES (?,?,?,?,?,?,?)";

        try (PreparedStatement preSt = getConnection().prepareStatement(query)) {

            preSt.setInt(1, 0);
            preSt.setString(2, CODIGOTIENDA);
            preSt.setString(3, NIT.getText());
            preSt.setString(4, productoN.get(j));
            preSt.setInt(5, cantidadN.get(j));
            preSt.setDouble(6, (totalN.get(j)/ cantidadN.get(j)));
            preSt.setDouble(7, totalN.get(j));
            
            preSt.executeUpdate();
            
            preSt.close();
        } catch (SQLException e) {
            //System.out.println("Error: " + e.getMessage());
        }
    
        } 
    }

}
